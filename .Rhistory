# Jinliang Yang
# function to prepare slurm script
setUpslurm <- function(slurmsh="largedata/GenSel/CL_test.sh",
codesh="sh largedata/myscript.sh",
wd=NULL, jobid="myjob", email=FALSE
){
#message(sprintf("###>>> cp from Introgression, tailored for pvpDiallel"))
##### setup working directory
if(is.null(wd)){
wd <- getwd()
}
dir.create("slurm-log", showWarnings = FALSE)
sbath <- paste0(wd, "/slurm-log/")
sbatho <- paste0(sbath, "testout-%j.txt")
sbathe <- paste0(sbath, "err-%j.txt")
sbathJ <- jobid
#### parameters pass to slurm script
cat(paste("#!/bin/bash"),
#-D sets your project directory.
#-o sets where standard output (of your batch script) goes.
#-e sets where standard error (of your batch script) goes.
#-J sets the job name.
paste("#SBATCH -D", wd, sep=" "),
paste("#SBATCH -o", sbatho, sep=" "),
paste("#SBATCH -e", sbathe, sep=" "),
paste("#SBATCH -J", sbathJ, sep=" "),
if(!is.null(email)){
paste0("#SBATCH--mail-user=", email),
paste("#SBATCH--mail-type=END"),
paste("#SBATCH--mail-type=FAIL #email if fails"),
}
"set -e",
"set -u",
"",
#"module load gmap/2014-05-15",
file=slurmsh, sep="\n", append=FALSE);
#### attach some sh scripts
cat(codesh, file=slurmsh, sep="\n", append=TRUE)
#### warning and message
#if(email){
#    cat("",
#        paste("python /home/jolyang/bin/send_email.py -s", slurmsh),
#        file=slurmsh, sep="\n", append=TRUE);
#}
message(paste("###>>> In this path: cd ", wd, sep=""), "\n",
paste("###>>> [ note: --ntasks=INT, number of cup ]"),"\n",
paste("###>>> [ note: --mem=16000, 16G memory ]"),"\n",
paste("###>>> RUN: sbatch -p bigmemh --ntasks=1", slurmsh),
"")
}
# Jinliang Yang
# function to prepare slurm script
setUpslurm <- function(slurmsh="largedata/GenSel/CL_test.sh",
codesh="sh largedata/myscript.sh",
wd=NULL, jobid="myjob", email=FALSE
){
#message(sprintf("###>>> cp from Introgression, tailored for pvpDiallel"))
##### setup working directory
if(is.null(wd)){
wd <- getwd()
}
dir.create("slurm-log", showWarnings = FALSE)
sbath <- paste0(wd, "/slurm-log/")
sbatho <- paste0(sbath, "testout-%j.txt")
sbathe <- paste0(sbath, "err-%j.txt")
sbathJ <- jobid
#### parameters pass to slurm script
cat(paste("#!/bin/bash"),
#-D sets your project directory.
#-o sets where standard output (of your batch script) goes.
#-e sets where standard error (of your batch script) goes.
#-J sets the job name.
paste("#SBATCH -D", wd, sep=" "),
paste("#SBATCH -o", sbatho, sep=" "),
paste("#SBATCH -e", sbathe, sep=" "),
paste("#SBATCH -J", sbathJ, sep=" "),
if(!is.null(email)){
paste(paste0("#SBATCH--mail-user=", email),
paste("#SBATCH--mail-type=END"),
paste("#SBATCH--mail-type=FAIL #email if fails"),
sep="\n")
}
"set -e",
"set -u",
"",
#"module load gmap/2014-05-15",
file=slurmsh, sep="\n", append=FALSE);
#### attach some sh scripts
cat(codesh, file=slurmsh, sep="\n", append=TRUE)
#### warning and message
#if(email){
#    cat("",
#        paste("python /home/jolyang/bin/send_email.py -s", slurmsh),
#        file=slurmsh, sep="\n", append=TRUE);
#}
message(paste("###>>> In this path: cd ", wd, sep=""), "\n",
paste("###>>> [ note: --ntasks=INT, number of cup ]"),"\n",
paste("###>>> [ note: --mem=16000, 16G memory ]"),"\n",
paste("###>>> RUN: sbatch -p bigmemh --ntasks=1", slurmsh),
"")
}
# Jinliang Yang
# function to prepare slurm script
setUpslurm <- function(slurmsh="largedata/GenSel/CL_test.sh",
codesh="sh largedata/myscript.sh",
wd=NULL, jobid="myjob", email=FALSE
){
#message(sprintf("###>>> cp from Introgression, tailored for pvpDiallel"))
##### setup working directory
if(is.null(wd)){
wd <- getwd()
}
dir.create("slurm-log", showWarnings = FALSE)
sbath <- paste0(wd, "/slurm-log/")
sbatho <- paste0(sbath, "testout-%j.txt")
sbathe <- paste0(sbath, "err-%j.txt")
sbathJ <- jobid
#### parameters pass to slurm script
cat(paste("#!/bin/bash"),
#-D sets your project directory.
#-o sets where standard output (of your batch script) goes.
#-e sets where standard error (of your batch script) goes.
#-J sets the job name.
paste("#SBATCH -D", wd, sep=" "),
paste("#SBATCH -o", sbatho, sep=" "),
paste("#SBATCH -e", sbathe, sep=" "),
paste("#SBATCH -J", sbathJ, sep=" "),
if(!is.null(email)){
paste(paste0("#SBATCH--mail-user=", email),
paste("#SBATCH--mail-type=END"),
paste("#SBATCH--mail-type=FAIL #email if fails"),
sep="\n"),
}
"set -e",
"set -u",
"",
#"module load gmap/2014-05-15",
file=slurmsh, sep="\n", append=FALSE);
#### attach some sh scripts
cat(codesh, file=slurmsh, sep="\n", append=TRUE)
#### warning and message
#if(email){
#    cat("",
#        paste("python /home/jolyang/bin/send_email.py -s", slurmsh),
#        file=slurmsh, sep="\n", append=TRUE);
#}
message(paste("###>>> In this path: cd ", wd, sep=""), "\n",
paste("###>>> [ note: --ntasks=INT, number of cup ]"),"\n",
paste("###>>> [ note: --mem=16000, 16G memory ]"),"\n",
paste("###>>> RUN: sbatch -p bigmemh --ntasks=1", slurmsh),
"")
}
# Jinliang Yang
# function to prepare slurm script
setUpslurm <- function(slurmsh="largedata/GenSel/CL_test.sh",
codesh="sh largedata/myscript.sh",
wd=NULL, jobid="myjob", email=FALSE
){
#message(sprintf("###>>> cp from Introgression, tailored for pvpDiallel"))
##### setup working directory
if(is.null(wd)){
wd <- getwd()
}
dir.create("slurm-log", showWarnings = FALSE)
sbath <- paste0(wd, "/slurm-log/")
sbatho <- paste0(sbath, "testout-%j.txt")
sbathe <- paste0(sbath, "err-%j.txt")
sbathJ <- jobid
#### parameters pass to slurm script
cat(paste("#!/bin/bash"),
#-D sets your project directory.
#-o sets where standard output (of your batch script) goes.
#-e sets where standard error (of your batch script) goes.
#-J sets the job name.
paste("#SBATCH -D", wd, sep=" "),
paste("#SBATCH -o", sbatho, sep=" "),
paste("#SBATCH -e", sbathe, sep=" "),
paste("#SBATCH -J", sbathJ, sep=" "),
paste0("#SBATCH--mail-user=", email),
paste("#SBATCH--mail-type=END"),
paste("#SBATCH--mail-type=FAIL #email if fails"),
"set -e",
"set -u",
"",
#"module load gmap/2014-05-15",
file=slurmsh, sep="\n", append=FALSE);
#### attach some sh scripts
cat(codesh, file=slurmsh, sep="\n", append=TRUE)
#### warning and message
#if(email){
#    cat("",
#        paste("python /home/jolyang/bin/send_email.py -s", slurmsh),
#        file=slurmsh, sep="\n", append=TRUE);
#}
message(paste("###>>> In this path: cd ", wd, sep=""), "\n",
paste("###>>> [ note: --ntasks=INT, number of cup ]"),"\n",
paste("###>>> [ note: --mem=16000, 16G memory ]"),"\n",
paste("###>>> RUN: sbatch -p bigmemh --ntasks=1", slurmsh),
"")
}
res <- read.csv("data/qpcr_rnaseq_cv.csv")
# Error bars represent standard error of the mean
part1 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.x),
err = sd(exp.x))
part1$temp <- as.factor(part1$temp)
# Error bars represent standard error of the mean
part2 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.y),
err = sd(exp.y))
part2$temp <- as.factor(part2$temp)
library("plyr")
res <- read.csv("data/qpcr_rnaseq_cv.csv")
# Error bars represent standard error of the mean
part1 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.x),
err = sd(exp.x))
part1$temp <- as.factor(part1$temp)
# Error bars represent standard error of the mean
part2 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.y),
err = sd(exp.y))
part2$temp <- as.factor(part2$temp)
############
library("ggplot2")
library("plyr")
res <- read.csv("data/qpcr_rnaseq_cv.csv")
# Error bars represent standard error of the mean
part1 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.x),
err = sd(exp.x))
part1$temp <- as.factor(part1$temp)
# Error bars represent standard error of the mean
part2 <- ddply(res, .(Assay, temp), summarize,
exp = mean(exp.y),
err = sd(exp.y))
part2$temp <- as.factor(part2$temp)
# This data is the blood pressure example in winBUGS
bloodpressure<-list(sex = c(0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
1, 1, 1, 1),
age = c(59, 52, 37, 40, 67, 43, 61, 34, 51, 58, 54, 31, 49, 45, 66, 48, 41, 47, 53, 62,
60, 33, 44, 70, 56, 69, 35, 36, 68, 38),
bp = c(143, 132, 88, 98, 177, 102, 154, 83, 131, 150, 131, 69, 111, 114, 170, 117,
96, 116, 131, 158, 156, 75, 111, 184, 141, 182, 74, 87, 183, 89))
# turn data into create X and Y matrices
X<- cbind(rep(1,30),bloodpressure$sex,bloodpressure$age)
y <- bloodpressure$bp
X
head(X)
head(ty)
head(y)
library(roxygen2)
